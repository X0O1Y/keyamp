#+title: Emacs and Keyboards
#+author: Egor Maltsev

¬´Think efficient¬ª

Based on [[https://github.com/xegorka/flykeys][flykeys]] and Emacs Mac Port.

#+begin_src bash
# emacs-mac
brew tap railwaycat/emacsmacport
brew install emacs-mac --with-natural-title-bar
defaults write org.gnu.Emacs TransparentTitleBar DARK
defaults write org.gnu.Emacs HideDocumentIcon YES
#+end_src

Below some features how to use it.

** Features
- Macbook efficient setup
- iOS setup
- [[https://github.com/philc/vimium][Vimium]] bindings inspired by [[https://github.com/xegorka/flykeys][flykeys]]
- More keyboards and options

* Macbook efficient setup

Thumb cluster for common keyboard, arrows on home row, number row by touch and more.

- Karabiner config file: [[karabiner.json]]
  karabiner - flykeys mode integration via variable!
- [[http://www.keyboard-layout-editor.com/#/gists/106550cd49793787784ed1b9c9117c3d][Layout]] based on [[https://github.com/xegorka/engram][Engineer Engram]]:

[[macbook.png]]

- Hack „Äê[[http://xahlee.info/emacs/misc/xah-fly-keys_esc.html][Escape]]„Äë
Escape activates command mode in GUI and terminal. Escape activates command mode in minibuffer, second press quits minibuffer. Deactivates mark too.

#+begin_src elisp
;; 1. <escape> set to flykeys-command-mode-activate in flykeys-shared-map
;; 2. <escape> set to flykeys-escape in flykeys-command-map
;; 3. catched tty ESC translates to <escape>

(progn
  (defun flykeys-escape ()
    "Hack escape."
    (interactive)
    (when (region-active-p)
      (deactivate-mark))
    (when (active-minibuffer-window)
      (abort-recursive-edit)))

  (define-key flykeys-command-map (kbd "<escape>") 'flykeys-escape))

(progn
  (defvar flykeys-fast-keyseq-timeout 50)

  (defun flykeys-tty-ESC-filter (map)
    (if (and (equal (this-single-command-keys) [?\e])
             (sit-for (/ flykeys-fast-keyseq-timeout 1000.0)))
        [escape] map))

  (defun flykeys-lookup-key (map key)
    (catch 'found
      (map-keymap (lambda (k b) (if (equal key k) (throw 'found b))) map)))

  (defun flykeys-catch-tty-ESC ()
    "Setup key mappings of current terminal to turn a tty's ESC into
`escape'."
    (when (memq (terminal-live-p (frame-terminal)) '(t pc))
      (let ((esc-binding (flykeys-lookup-key input-decode-map ?\e)))
        (define-key input-decode-map
          [?\e] `(menu-item "" ,esc-binding :filter flykeys-tty-ESC-filter)))))

  (flykeys-catch-tty-ESC)

  (define-key key-translation-map (kbd "ESC") (kbd "<escape>")))
#+end_src

[[desktop.png]]

*** Title bar
#+begin_src elisp
(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))

(when (display-graphic-p)
  (setq display-time-default-load-average nil)
  (setq battery-mode-line-format "%b%p%%   ")
  (setq display-time-format "%a %e %b %R")
  (setq ns-use-proxy-icon nil)

  (setq frame-title-format
        (list
         '(:eval (mu4e--modeline-string))

         (let ((xph "")
              (xmu4e (length '(:eval (mu4e--modeline-string))))
              (xcount 120))
           (dotimes (_ (- xcount xmu4e)) ;; placeholder
            (setq xph (concat "	" xph))) ;; note tab char
          xph)

         'battery-mode-line-string
         'display-time-string))

  (display-battery-mode 1)
  (display-time-mode 1))
#+end_src

*** Modeline
#+begin_src elisp
(setq-default mode-line-format nil) ;; on top
(setq-default header-line-format
              (list
               " "
               ;; mode indicator
               (when (not (display-graphic-p))
                 '(:eval mode-line-front-space))

               ;; buffer name
               '(:eval (propertize " %b"
                                   'face
                                   (if (buffer-modified-p)
                                       'font-lock-string-face
                                     'font-lock-builtin-face)
                                   'help-echo
                                   (buffer-file-name)))

               ;; branch
               '(:eval (when
                           (and vc-mode
                                (not (string-equal (substring vc-mode 5) "master")))
                         (list " " (substring vc-mode 5))))

               ;; align right spacer
               '(:eval (propertize
                        " " 'display
                        `((space :align-to
                                 (- (+ right right-fringe right-margin) ,
                                    (+ (length (format-mode-line "%l:%c "))
                                       ))))))

               ;; position
               '(:eval (propertize "%l:%c "
                                   'face 'font-lock-builtin-face))
               ))
#+end_src

* iOS setup

Emacs in pocket with unicode support. Use [[https://apps.apple.com/us/app/termius-terminal-ssh-client/id549039908][Termius]] client. Custom keyboard.

*** Custom iOS screen keyboard
- ABC, Cyrillic and Engineer Engram layouts
  - App Store: [[https://apps.apple.com/us/app/xkeyboard-custom-keyboard/id1440245962][xKeyboard - Custom Keyboard]]
  - Layout file: [[ABC-–ê–ë–í.xkeyboard]]
  - Layout file: [[engineer-engram.xkeyboard]]

*** Screen keyboard add-on Termius
- „Äê‚Üë„Äë „Äê‚Üì„Äë „Äê^_„Äë „Äêesc„Äë „Äê‚Üê„Äë „Äê‚Üí„Äë „Äêctrl„Äë „Äê^c„Äë

*** Preferences
- Set terminal and keyboard coding system to utf-8:
#+begin_src elisp
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
#+end_src

- Use „Äê:„Äë as leader to bind combinations to candidates keys:
#+begin_src bash
  (define-key flykeys-command-map (kbd ":")          'flykeys-leader-key-map)
#+end_src

[[mobile-s50.png]]

- Emacs in tmux - instant remote access. Put in .bashrc:
#+begin_src bash
  alias tmux='tmux -u'

  if [[ -z $TMUX ]] && [[ -n $SSH_TTY ]] && [[ $TERM != "dumb" ]]; then
      session=0

      if tmux has-session -t "$session" 2>/dev/null; then
          exec tmux -u a -t "$session"
      else
          exec tmux -u new-session -s "$session"
      fi
  fi
#+end_src

- Nord theme for Emacs and Termius. Works worthy for GUI and terminal.
- Color mode indicators
  - Useful for terminal without i-beam cursor shape and for remote machines
#+begin_src elisp
(setq flykeys-command-mode-indicator "üü¢")
(setq flykeys-insert-mode-indicator "üü†")

(defun repeat-message-short (msg)
  "Display short repeat message as a function name with blue indicator."
  (message (concat "üîµ " (substring msg 18))))
(setq repeat-message-function 'repeat-message-short)
#+end_src

* Vimium bindings inspired by [[https://github.com/xegorka/flykeys][flykeys]]

- Complete config file: [[vimium-options.json]]
- Complete config file: [[vimium-options-engineer-engram.json]]
- [[http://www.keyboard-layout-editor.com/#/gists/5818428d1d8bcc4f7768d54720e9ef07][Bindings redesign]]:
[[vimium.png]]

#+begin_src
# unmap defaults
unmap W
unmap J
unmap P
unmap X
unmap F
unmap <c-e>
unmap <c-y>
unmap gg
unmap G
unmap zH
unmap zL
unmap yy
unmap gu
unmap gU
unmap gi
unmap <a-f>
unmap yf
unmap gf
unmap gF
unmap O
unmap B
unmap ge
unmap gE
unmap N
unmap H
unmap gt
unmap gT
unmap ^
unmap g0
unmap g$
unmap yt
unmap <a-p>
unmap <a-m>
unmap >>
unmap <<
unmap ?
unmap gs
unmap [[
unmap ]]
unmap `

# right hand mappings
map d scrollPageUp
map t scrollPageDown
map h previousTab
map s nextTab
map . goBack
map n goForward
map r scrollUp
map m scrollDown
map f toggleMuteTab
map p showHelp
map " Vomnibar.activateTabSelection
map w Vomnibar.activateInNewTab
map q visitPreviousTab
map l Vomnibar.activateInNewTab keyword=b
map ? enterFindMode
map - Vomnibar.activateBookmarksInNewTab

# left hand mappings
map b togglePinTab
map y reload hard
map o scrollPageUp
map u reload
map ' enterVisualMode
map c focusInput
map i LinkHints.activateModeToOpenInNewTab
map e scrollPageDown
map a LinkHints.activateMode
map , createTab
map g restoreTab
map x removeTab
map j copyCurrentUrl
map k duplicateTab

# scroll with arrows too
map <up> scrollUp
map <down> scrollDown

# navigate search results
map <right> performFind
map <left> performBackwardsFind

# navigate paginated site
map z goPrevious
map { goNext

map @ LinkHints.activateMode action=focus
map & LinkHints.activateMode action=hover
map / moveTabLeft
map $ moveTabRight
map * firstTab
map = lastTab
map # scrollFullPageUp
map % scrollFullPageDown

map <space> scrollPageDown

map <backspace><backspace> LinkHints.activateMode
map <backspace><enter> focusInput
map <backspace>. scrollToTop
map <backspace>n scrollToBottom
map <backspace>i LinkHints.activateModeToOpenInNewTab count=99
map <backspace>j LinkHints.activateModeToCopyLinkUrl
map <backspace>k LinkHints.activateModeToDownloadLik
map <backspace>a LinkHints.activateModeToOpenInNewForegroundTab
map <backspace>, Vomnibar.activateEditUrl

map <enter><backspace> LinkHints.activateMode
map <enter><enter> focusInput
map <enter>. scrollToTop
map <enter>n scrollToBottom
map <enter>i LinkHints.activateModeToOpenInNewTab count=99
map <enter>j LinkHints.activateModeToCopyLinkUrl
map <enter>k LinkHints.activateModeToDownloadLik
map <enter>a LinkHints.activateModeToOpenInNewForegroundTab
map <enter>, Vomnibar.activateEditUrl
#+end_src

* More keyboards and options
- Kinesis Advantage2 [[http://www.keyboard-layout-editor.com/#/gists/6a1a62133ab9f741589bd556cb946792][layout]] and [[qwerty2.txt][config]]:
[[advantage2.png]]

Highly recommend portable lightweight keyboard:
- [[https://www.aliexpress.com/i/32837821853.html][AVATTO A20 Portable Leather Folding Mini Bluetooth]] weight 174 g

- Engineer Engram layout
Toggle translate qwerty layout to engineer engram on Emacs level. Useful when engineer engram layout not available in a different way.

  #+begin_src elisp
  (toggle-qwerty-to-engineer-engram)
  #+end_src

[[pocket.jpg]]
