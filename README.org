#+title: Keyamp
#+author: Egor Maltsev

Input model based on [[file:packages/keyamp.el][keyamp]] for Emacs.

Below features how to use it.

** Features
- ANSI keyboard layout
- Virtual keyboard
- Split keyboard layout
- [[https://github.com/philc/vimium][Vimium]] mappings

* ANSI keyboard layout

Thumb cluster for common keyboard, arrows on home row, number row by touch and more.

- [[file:karabiner/karabiner.json][Karabiner]] config file. Emacs mode integration via variable!
- [[http://www.keyboard-layout-editor.com/#/gists/106550cd49793787784ed1b9c9117c3d][Layout]] based on [[file:layouts/Engram.bundle][Engineer Engram]]:

[[screenshots/ansi-keyboard.png]]

- Automatic Russian layout support for command bindings

- Hack 【[[http://xahlee.info/emacs/misc/xah-fly-keys_esc.html][Escape]]】
Escape activates command mode in GUI and terminal. Escape activates command mode in minibuffer, second press quits minibuffer. Deactivates mark too.

#+begin_src elisp
;; 1. <escape> set to keymap-command-mode-activate in keymap-shared-map
;; 2. <escape> set to keymap-escape in keymap-command-map
;; 3. catched tty ESC translates to <escape>

(progn
  (defun keyamp-escape ()
    "Hack escape."
    (interactive)
    (when (region-active-p)
      (deactivate-mark))
    (when (active-minibuffer-window)
      (abort-recursive-edit)))

  (define-key keyamp-command-map (kbd "<escape>") 'keyamp-escape))

(progn
  (defvar keyamp-fast-keyseq-timeout 50)

  (defun keyamp-tty-ESC-filter (map)
    (if (and (equal (this-single-command-keys) [?\e])
             (sit-for (/ keyamp-fast-keyseq-timeout 1000.0)))
        [escape] map))

  (defun keyamp-lookup-key (map key)
    (catch 'found
      (map-keyamp (lambda (k b) (if (equal key k) (throw 'found b))) map)))

  (defun keyamp-catch-tty-ESC ()
    "Setup key mappings of current terminal to turn a tty's ESC into
`escape'."
    (when (memq (terminal-live-p (frame-terminal)) '(t pc))
      (let ((esc-binding (keyamp-lookup-key input-decode-map ?\e)))
        (define-key input-decode-map
          [?\e] `(menu-item "" ,esc-binding :filter keyamp-tty-ESC-filter)))))

  (keyamp-catch-tty-ESC)

  (define-key key-translation-map (kbd "ESC") (kbd "<escape>")))
#+end_src

#+begin_src bash
# emacs-mac
brew tap railwaycat/emacsmacport
brew install emacs-mac --with-natural-title-bar
defaults write org.gnu.Emacs TransparentTitleBar DARK
defaults write org.gnu.Emacs HideDocumentIcon YES
#+end_src

[[screenshots/desktop.png]]

*** Titlebar
#+begin_src elisp
(when (display-graphic-p)
  (setq display-time-default-load-average nil
        battery-mode-line-format "%b%p%%   "
        display-time-format "%a %e %b %R"
        ns-use-proxy-icon nil
        icon-title-format t)
  (setq frame-title-format
        (list (make-string 200 ?\t) 'battery-mode-line-string 'display-time-string))
  (display-battery-mode)
  (display-time-mode))
#+end_src

*** Modeline on top
#+begin_src elisp
(setq-default mode-line-format nil
              header-line-format
              (list
               " "
               ;; mode indicator
               (when terminal-p 'mode-line-front-space)
               ;; buffer name
               '(:eval (propertize " %b"
                                   'face
                                   (if (and (buffer-modified-p) (buffer-file-name))
                                       'font-lock-string-face
                                     'font-lock-builtin-face)
                                   'help-echo
                                   (buffer-file-name)))

               ;; branch
               '(:eval (when
                           (and vc-mode
                                (not (or (string-equal (substring vc-mode 5) "master")
                                         (string-equal (substring vc-mode 5) "main"))))
                         (list " @" (substring vc-mode 5))))
               ;; align right spacer
               '(:eval (propertize
                        " " 'display
                        `((space :align-to
                                 (- (+ right right-fringe right-margin)
                                    ,(+ (length (format-mode-line "%l:%c "))))
                                 ))))
               ;; position in buffer
               '(:eval (propertize "%l:%c " 'face 'font-lock-builtin-face))))
#+end_src

* Virtual keyboard

Emacs in pocket with unicode support. [[https://apps.apple.com/us/app/termius-terminal-ssh-client/id549039908][Termius]] client. Custom keyboard.

*** Custom
- Engineer Engram and Russian layouts
  - [[https://apps.apple.com/us/app/xkeyboard-custom-keyboard/id1440245962][xKeyboard - Custom Keyboard]]
  - Layout file: [[file:layouts/Engineer-Engram.xkeyboard][Engineer-Engram.xkeyboard]]

*** Preferences
- Set terminal and keyboard coding system to utf-8:
#+begin_src elisp
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
#+end_src

- Use [[https://github.com/justbur/emacs-which-key][which-key]] for binding completion

[[screenshots/virtual-keyboard.png]]

- Emacs in tmux over mosh - instant remote access
#+begin_src bash
  mosh-server new -s -c 256 -l LANG=en_US.UTF-8 -- tmux -u new -As0 'emacs'
#+end_src

- Emacs in [[https://ish.app/][iSH]] - offline local access on iOS from Termius

- Nord theme for Emacs and Termius. Works worthy for GUI and terminal.

- Color mode indicators

* Split keyboard layout
- Kinesis Advantage2 [[http://www.keyboard-layout-editor.com/#/gists/6a1a62133ab9f741589bd556cb946792][layout]] and [[file:layouts/qwerty2.txt][config]]:

[[screenshots/advantage2.png]]

* Vimium mappings

- Complete config file: [[file:layouts/vimium-options.json][vimium-options.json]]
